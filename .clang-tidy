Checks: >
 -*,
 bugprone*,
 readability*,
 cppcoreguidelines*,
 clang-analyzer*,
 performance*,
 -cppcoreguidelines-pro-type-union-access,
 -cppcoreguidelines-pro-type-vararg,
 -cppcoreguidelines-avoid-non-const-global-variables,
 -cppcoreguidelines-pro-bounds-pointer-arithmetic,
 -readability-function-cognitive-complexity

CheckOptions:
 - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
 - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
 - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
 - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }
 - { key: readability-identifier-naming.FunctionCase,           value: camelBack  }
 - { key: readability-identifier-naming.VariableCase,           value: camelBack }
 - { key: readability-identifier-naming.ClassMemberCase,        value: camelBack }
 - { key: readability-identifier-naming.ClassMemberCase,        value: camelBack }
 - { key: readability-identifier-naming.PrivateMemberCase,      value: camelBack }
 - { key: readability-identifier-naming.ProtectedMemberCase,    value: camelBack }
 - { key: readability-identifier-naming.EnumConstantCase,         value: camelBack }
 - { key: readability-identifier-naming.ConstexprVariableCase,    value: camelBack }
 - { key: readability-identifier-naming.GlobalConstantCase,       value: camelBack }
 - { key: readability-identifier-naming.MemberConstantCase,       value: CamelCase }
 - { key: readability-identifier-naming.StaticConstantCase,       value: camelBack }
 - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: 1   }
 - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: 1   }
