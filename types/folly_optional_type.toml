[info]
typeName = "folly::Optional<"
numTemplateParams = 1
ctype = "FOLLY_OPTIONAL_TYPE"
header = "folly/Optional.h"
ns = ["folly::Optional"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
# underlyingContainerIndex = 0

[codegen]
decl = """
template<typename T>
void getSizeType(const %1%<T> &s_ptr, size_t& returnArg);
"""

func = """
template <typename T>
void getSizeType(const %1%<T>& s_ptr, size_t& returnArg) {
  if (s_ptr) {
    SAVE_SIZE(sizeof(%1%<T>) - sizeof(T));
    SAVE_DATA((uintptr_t)(s_ptr.get_pointer()));

    getSizeType(*(s_ptr.get_pointer()), returnArg);
  } else {
    SAVE_SIZE(sizeof(%1%<T>));
    SAVE_DATA(0);
  }
}
"""
